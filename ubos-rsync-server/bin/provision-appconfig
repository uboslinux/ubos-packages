#!/usr/bin/perl
#
# Provision an entry in ~${package.name}/.ssh/authorized_keys
#
# Expects the entire content of id_rsa.pub to be provided as publicsshkey
#
# This is a little tricky because:
# * there many be several AppConfigurations of an app on the same host
# * more than one of the AppConfigurations may use the same key
# * we want the client to be able to upload with
#      rsync -e 'ssh -i <key>' <local> ${package.name}@<site>:<appconfigid>/<remote>
#
# So we first dispatch on the key (if used once or more) by means of the authorized_keys
# file, and then secondly by <appconfigid>, while making sure that nobody can
# write an AppConfiguration that they didn't provide the key for.
# To implement this, we need to update the authorized_keys file every time
# an AppConfiguration is added or removed. The authorized_keys file contains
# calls to safe-rsync.pl and provides allowed appconfigids as arguments.

use strict;
use warnings;

use UBOS::Logging;
use UBOS::Utils;

my $packageName = $config->getResolve( 'package.name' );
my $appConfigId = $config->getResolve( 'appconfig.appconfigid' );
my $sshKey      = $config->getResolve( 'installable.customizationpoints.publicsshkey.value' );
my $rsyncSubdir = '/rsyncsubdir';

$sshKey =~ s!^\s+!!;
$sshKey =~ s!\s+$!!;

my( $name, $passwd, $uid, $gid, $quota, $comment, $gcos, $dir, $shell, $expire ) = getpwnam( $packageName ) ;

my $sshDir            = "$dir/.ssh";
my $authorizedKeyFile = "$sshDir/authorized_keys";

if( 'deploy' eq $operation ) {
    unless( -d $sshDir ) {
        UBOS::Utils::mkdir( $sshDir, 0700, $uid, $gid );
    }
    UBOS::Utils::saveFile( "$sshDir/$appConfigId.key", $sshKey, 0600, $uid, $gid );
}

if( 'undeploy' eq $operation ) {
    UBOS::Utils::deleteFile( "$sshDir/$appConfigId.key" );
}

if( 'deploy' eq $operation || 'undeploy' eq $operation ) {

    # Now read all $appConfigId.key files, and create an authorized_keys file from them
    # that has one line for each key, and provides the corresponding appconfigids as
    # arguments to safe-rsync.pl

    my %keyToAppConfigIds = ();
    opendir( my $sshDirFh, $sshDir ) or error( "Cannot read directory $sshDir" );
    foreach my $file ( readdir( $sshDirFh )) {
        if( $file =~ m!^(a[0-9a-f]{40})\.key$! ) {
            my $id   = $1;
            my $keys = UBOS::Utils::slurpFile( "$sshDir/$file" );

            # This may be more than one key
            foreach my $key ( split /\n/, $keys ) {
                unless( exists( $keyToAppConfigIds{$key} )) {
                    $keyToAppConfigIds{$key} = [];
                }
                push @{$keyToAppConfigIds{$key}}, $id;
            }
        }
    }
    close $sshDirFh;

    my $content = <<CONTENT;
# This file is automatically generated by ubos-rsync-server's provision-appconfig
# Do not edit, your changes will be overridden, probably when you least expect it.
#
CONTENT

    # From the man page:
    # Each  line of the file contains one key (empty lines and lines starting with a `#' are
    # ignored as comments).
    # Protocol 2 public key consist of: options, keytype, base64-encoded key, comment.
    # The options field is optional; its presence is determined by
    # whether the line starts with a number or not (the options field never starts with a number).
    # For protocol version 2 the keytype is ``ecdsa-sha2-nistp256'', ``ecdsa-sha2-nistp384'',
    # ``ecdsa-sha2-nistp521'', ``ssh-ed25519'', ``ssh-dss'' or ``ssh-rsa''.
    #
    # e.g.
    # ssh-rsa AAAAB3...Y3yjYd user@example.com
    #
    # The options (if present) consist of comma-separated option specifications. No spaces are
    # permitted, except within double quotes.
    #
    # command="command"
    # Specifies that the command is executed whenever this key is used for authentication.
    # The command supplied by the user (if any) is ignored.
    # A quote may be included in the command by quoting it with a  backslash.
    # This  option might be useful to restrict certain public keys to perform just a specific
    # operation. The  command  originally  supplied by the client is available in the
    # SSH_ORIGINAL_COMMAND environment variable. Note that this option applies to shell,
    # command or subsystem execution. Also note that this command may be  superseded by either
    # a sshd_config(5) ForceCommand directive or a command embedded in a certificate.

    foreach my $key ( sort keys %keyToAppConfigIds ) {
        my @ids = @{$keyToAppConfigIds{$key}};
        $content .= 'command="/usr/share/ubos-rsync-server/bin/safe-rsync-server '
                 . $packageName
                 . ' ' . $rsyncSubdir
                 . ' ' . join( ' ', @ids )
                 . '"';
        $content .= " $key\n";
    }
    UBOS::Utils::saveFile( $authorizedKeyFile, $content, 0600, $uid, $gid );
}

1;
